rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    function isValidImageSize() {
      return request.resource.size < 25 * 1024 * 1024; // 25 MB
    }

    function isValidImageType() {
      return request.resource.contentType.matches('image/.*') ||
             request.resource.contentType == 'application/pdf';
    }

    // Profile photos
    match /profiles/{profileId}/{fileName} {
      allow read: if true; // Public read
      allow write: if isAdmin() && isValidImageSize() && isValidImageType();
      allow delete: if isAdmin();
    }

    // Organization photos
    match /organizations/{orgId}/{fileName} {
      allow read: if true; // Public read
      allow write: if isAdmin() && isValidImageSize() && isValidImageType();
      allow delete: if isAdmin();
    }

    // Review photos
    match /reviews/{reviewId}/{fileName} {
      allow read: if true; // Public read
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAdmin();
    }

    // User avatars
    match /avatars/{userId}/{fileName} {
      allow read: if true; // Public read
      allow write: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      isValidImageSize() &&
                      isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}
